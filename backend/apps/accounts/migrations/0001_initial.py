# Generated by Django 5.1.6 on 2025-05-04 05:32


import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models
from apps.accounts.utils.validations import validate_phone_number


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(help_text='Required. Valid email address serving as username.', max_length=254, unique=True, verbose_name='email address')),
                ('role', models.CharField(choices=[('ST', 'Student'), ('TE', 'Teacher'), ('AD', 'Admin')], default='ST', help_text='Determines user permissions and interface', max_length=2, verbose_name='system role')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether the user has verified their email', verbose_name='verified status')),
                ('is_approved', models.BooleanField(default=True, help_text='Designates whether the user (teacher) is approved by admin', verbose_name='approved status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_groups', related_query_name='custom_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions', related_query_name='custom_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone_number', models.CharField(blank=True, help_text='E.164 formatted international number', max_length=20, null=True, unique=True, validators=[validate_phone_number], verbose_name='phone number')),
                ('date_of_birth', models.DateField(blank=True, help_text='YYYY-MM-DD format', null=True, verbose_name='date of birth')),
                ('gender', models.CharField(choices=[('MA', 'Male'), ('FE', 'Female'), ('UD', 'Prefer not to say')], default='UD', max_length=2, verbose_name='gender')),
                ('avatar', models.ImageField(blank=True, help_text='Square image 512x512 pixels max', null=True, upload_to='avatars/', verbose_name='profile picture')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='studentprofile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('grade_level', models.CharField(blank=True, help_text='Current educational level (e.g., 10th Grade)', max_length=50, verbose_name='grade level')),
                ('parent_email', models.EmailField(blank=True, help_text='Guardian contact information', max_length=254, verbose_name='parent email')),
                ('enrolled_date', models.DateField(auto_now_add=True, verbose_name='enrollment date')),
            ],
            options={
                'verbose_name': 'student profile',
                'verbose_name_plural': 'student profiles',
            },
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone_number', models.CharField(blank=True, help_text='E.164 formatted international number', max_length=20, null=True, unique=True, validators=[validate_phone_number], verbose_name='phone number')),
                ('date_of_birth', models.DateField(blank=True, help_text='YYYY-MM-DD format', null=True, verbose_name='date of birth')),
                ('gender', models.CharField(choices=[('MA', 'Male'), ('FE', 'Female'), ('UD', 'Prefer not to say')], default='UD', max_length=2, verbose_name='gender')),
                ('avatar', models.ImageField(blank=True, help_text='Square image 512x512 pixels max', null=True, upload_to='avatars/', verbose_name='profile picture')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='teacherprofile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('department', models.CharField(blank=True, help_text='Academic department affiliation', max_length=100, verbose_name='department')),
                ('office_number', models.CharField(blank=True, help_text='Building and room number', max_length=20, verbose_name='office number')),
                ('qualifications', models.TextField(blank=True, help_text='Professional certifications and degrees', verbose_name='qualifications')),
                ('hire_date', models.DateField(auto_now_add=True, verbose_name='hire date')),
            ],
            options={
                'verbose_name': 'teacher profile',
                'verbose_name_plural': 'teacher profiles',
            },
        ),
        migrations.CreateModel(
            name='ApprovalRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('message', models.TextField(blank=True, help_text='Optional message from teacher')),
                ('document', models.FileField(blank=True, null=True, upload_to='approval_documents/%Y/%m/%d/')),
                ('status', models.CharField(choices=[('PE', 'Pending'), ('AP', 'Approved'), ('RE', 'Rejected')], default='PE', max_length=2)),
                ('qualifications', models.TextField(help_text='Professional certifications and degrees')),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection, if any')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approval_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmailVerificationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('new_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'email verification token',
                'verbose_name_plural': 'email verification tokens',
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'password reset token',
                'verbose_name_plural': 'password reset tokens',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username', 'email'], name='auth_credential_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(condition=models.Q(('is_verified', False)), fields=['is_verified'], name='unverified_users_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='accounts_us_role_1fa9a5_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_approved'], name='accounts_us_is_appr_372a28_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('email'), name='unique_lower_email'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(condition=models.Q(('username__iregex', '^[0-9]+$'), _negated=True), name='username_not_all_numeric'),
        ),
        migrations.AddConstraint(
            model_name='approvalrequest',
            constraint=models.UniqueConstraint(fields=('user', 'status'), name='unique_pending_request'),
        ),
        migrations.AddIndex(
            model_name='emailverificationtoken',
            index=models.Index(fields=['token'], name='accounts_em_token_5f2b37_idx'),
        ),
    ]
