# Generated by Django 5.1.6 on 2025-05-04 05:36

import apps.examination.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('content', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('duration', models.PositiveIntegerField(default=10)),
                ('max_attempts', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('scoring_scheme', models.JSONField()),
                ('question_filters', models.JSONField(default=dict)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tests', to=settings.AUTH_USER_MODEL)),
                ('questions', models.ManyToManyField(related_name='tests', to='content.question')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='content.subject')),
            ],
        ),
        migrations.CreateModel(
            name='TestAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('score', models.FloatField(blank=True, null=True)),
                ('performance_metrics', models.JSONField(default=dict, validators=[apps.examination.models.TestAttempt.validate_performance_metrics])),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='examination.test')),
            ],
        ),
        migrations.CreateModel(
            name='StudentResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('selected_answer', models.CharField(max_length=1)),
                ('is_correct', models.BooleanField()),
                ('time_taken', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.question')),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='examination.testattempt')),
            ],
        ),
        migrations.AddIndex(
            model_name='test',
            index=models.Index(fields=['created_by'], name='examination_created_346f30_idx'),
        ),
        migrations.AddIndex(
            model_name='testattempt',
            index=models.Index(fields=['student'], name='examination_student_c585bd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='testattempt',
            unique_together={('student', 'test')},
        ),
        migrations.AddIndex(
            model_name='studentresponse',
            index=models.Index(fields=['attempt'], name='examination_attempt_d14101_idx'),
        ),
        migrations.AddIndex(
            model_name='studentresponse',
            index=models.Index(fields=['question'], name='examination_questio_f4aa2f_idx'),
        ),
    ]
